[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-reporting-v4"
version = "0.1.0"
description = "AI-powered Virtual Data Analyst"
requires-python = ">=3.10"
readme = "README.md"

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

# Pydantic plugin options
[[tool.mypy.overrides]]
module = "pydantic.*"
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "langchain.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_openai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_community.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tavily_python.*"
ignore_missing_imports = true

[tool.pytest]
pythonpath = ["."]
testpaths = ["app/tests"]
python_files = "test_*.py"
python_functions = "test_*"

[tool.pytest.ini_options]
addopts = "--cov=app --cov-report=term --cov-report=html:coverage/html --cov-report=xml:coverage/coverage.xml"

[tool.coverage.run]
source = ["app"]
omit = ["app/tests/*"]
data_file = "coverage/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.coverage.html]
directory = "coverage/html"

[tool.coverage.xml]
output = "coverage/coverage.xml"